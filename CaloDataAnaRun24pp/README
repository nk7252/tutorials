Maintainer: Anthony Hodges, University of Illinois, Urbana-Champaign
Message me on mattermost for questions or comments :)

Newest push: Jun 27th, 2025

This code is a general purpose QA histogram maker for the calorimeters. The code is modularized to run in p+p and Au+Au via flags, so please make sure you check the flags before you run!

To build the code, please make sure you're sourcing a local sPHENIX build and have your LD_LIBRARY_PATH and something analogous to your MYINSTALL directory set. Refer to the day-one tutorial for setting these environment variables and building a package

#Building:
cd src
mkdir build
cd build
$PWD/../autogen.sh --prefix=$MYINSTALL #this should be your unique installation directory
make install -j8 

Currently there are two versions of the constructor, one for Au+Au, and one for p+p:

void Fun4All_CaloHistGen(const int nEvents = 10000, const std::string &fnameCalib = "/direct/sphenix+lustre01/sphnxpro/production/run3auau/physics/caloy2calib/new_newcdbtag_v005/run_00068100_00068200/DST_CALO_run3auau_new_newcdbtag_v005-00068152-00000.root", const std::string &fnameRaw = "/direct/sphenix+lustre01/sphnxpro/production/run3auau/physics/caloy2fitting/new_newcdbtag_v005/run_00068100_00068200/DST_CALOFITTING_run3auau_new_newcdbtag_v005-00068152-00000.root",const std::string &outName = "commissioning.root", const std::string &dbtag = "ProdA_2024")//Constructor for Run 25 Au+Au

Run 68152 appeared to have decent performance in the offline QA:
https://sphenix-intra.sdcc.bnl.gov/WWW/subsystem/QAHtml/mon.cgi?runnumber=68152&runtype=physics


And the following is the constructor to look at Run 24 p+p data:
void Fun4All_CaloHistGen(const int nEvents = 0, const std::string &fnameCalib = "/direct/sphenix+lustre01/sphnxpro/production/run2pp/physics/ana468_2024p012_v001/DST_CALO/run_00052000_00052100/dst/DST_CALO_run2pp_ana468_2024p012_v001-00052032-00000.root", const std::string &fnameRaw = "/direct/sphenix+lustre01/sphnxpro/production/run2pp/physics/ana468_2024p012_v001/DST_CALOFITTING/run_00052000_00052100/dst/DST_CALOFITTING_run2pp_ana468_2024p012_v001-00052032-00000.root",const std::string &outName = "commissioning.root", const std::string &dbtag = "ProdA_2024")

Again watch for updates to the file system. 

Code walkthrough:
Constructor: basically tells the module what input files you're running over. Note we have one for CaloFitting and one for Calo; why we need both of them is a bit in the weeds right now, so don't worry about it. Once you start looking at physics-level things you'll use the jet dst's. Also contains the name of the output file "commissioning.root" and the cdb tag "ProdA_2024", which as far as I know hasn't changed in 2025.

Flags and settings:
To start off, the Fun4All macro snags the run number and system type from the file name (lines 35-47). 
Lines 50-52 are getting the CDB ready
Lines 56-62 are creating the input managers which read in the input files you provide in the constructor
Line 65 IS VERY IMPORTANT YOU NEED IT IN EVERY CALORIMETER-BASED FUN4ALL MACRO YOU WRITE EVER. It applies all the calibrations we have available, which you probably want. I, personally, enjoy looking at calibrated data. 

Line 68 and onwards really sets up the analysis module. In short, you can see the macro tells the module whether or not you're in AuAu, and then what it should store/what node names it should look for. 

Right now, there's really no harm in turning everything on. This code used to be an nTupleMaker, so it was vitally important to have this functionality to trim the output file size, but since everything is a histogram, it really doesn't matter. 

Most of the settings deal with pi0 reconstruction, and you should feel free to play around with these parameters:
setMaxAlpha: Maximum energy asymmetry between the di-cluster pair used in reconstruction
setCluster#EMin: set the minimum energy for the leading and sub leading cluster
peripheralOnlyPi0: in heavy ion collisions, use only "peripheral" collisions, meaning those with low total calo energy
setCaloFrac: Fraction of max calo energy allowed in analysis. We guestimated the maximum calorimeter energy and this sets the maximum fraction of that total energy. So 0.2 means you only allow events that reach 20% of the max calo energy, which should map not-so-terribly to some peripheral part of the centrality phase space
setTrig: what triggers do you want? Check the header file for more options. If you don't turn it on you get everything. 
